<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Changes to this file committed after and not including commit-id: ccc0d2c5f9a5ac661e60e6eaf138de7889928b8b
  ~ are released under the following license:
  ~
  ~ This file is part of Hopsworks
  ~ Copyright (C) 2018, Logical Clocks AB. All rights reserved
  ~
  ~ Hopsworks is free software: you can redistribute it and/or modify it under the terms of
  ~ the GNU Affero General Public License as published by the Free Software Foundation,
  ~ either version 3 of the License, or (at your option) any later version.
  ~
  ~ Hopsworks is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  ~ without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  ~ PURPOSE.  See the GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License along with this program.
  ~ If not, see <https://www.gnu.org/licenses/>.
  ~
  ~ Changes to this file committed before and including commit-id: ccc0d2c5f9a5ac661e60e6eaf138de7889928b8b
  ~ are released under the following license:
  ~
  ~ Copyright (C) 2013 - 2018, Logical Clocks AB and RISE SICS AB. All rights reserved
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy of this
  ~ software and associated documentation files (the "Software"), to deal in the Software
  ~ without restriction, including without limitation the rights to use, copy, modify, merge,
  ~ publish, distribute, sublicense, and/or sell copies of the Software, and to permit
  ~ persons to whom the Software is furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all copies or
  ~ substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  OR IMPLIED, INCLUDING
  ~ BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  ~ NONINFRINGEMENT. IN NO EVENT SHALL  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  ~ DAMAGES OR  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.hops</groupId>
    <artifactId>hopsworks</artifactId>
    <version>0.6.0-SNAPSHOT</version>
    <relativePath>..</relativePath>
  </parent>
  
  <groupId>io.hops.hopsworks</groupId>
  <artifactId>hopsworks-api</artifactId>
  <version>0.6.0-SNAPSHOT</version>
  <packaging>war</packaging>
  <description>Hopsworks rest api</description>
  <name>hopsworks-api</name>
    
  <dependencies>
    
    <dependency>
      <groupId>io.hops</groupId>
      <artifactId>service-proxy-core</artifactId>
      <version>4.4.3-SNAPSHOT</version>
    </dependency>
    
    <dependency>
      <groupId>xalan</groupId>
      <artifactId>xalan</artifactId>
      <version>2.7.2</version>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.2</version>
    </dependency>
<!--    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>4.3.8.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>4.3.8.RELEASE</version>
    </dependency>-->
    
    
    <dependency>
      <groupId>org.apache.portals.applications</groupId>
      <artifactId>apa-webcontent2-content-rewriter</artifactId>
      <version>2.0</version>
    </dependency>    
    
    <dependency>
      <groupId>org.apache.portals.applications</groupId>
      <artifactId>apa-webcontent2-reverse-proxy</artifactId>
      <version>2.0</version>
    </dependency>    
    
    <dependency>
      <groupId>io.hops.hopsworks</groupId>
      <artifactId>hopsworks-common</artifactId>
      <version>0.6.0-SNAPSHOT</version>
      <type>ejb</type>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>javax.servlet</groupId>
          <artifactId>*</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.apache.flink</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions> 
    </dependency>
    <dependency>
      <groupId>io.hops.hopsworks</groupId>
      <artifactId>hopsworks-dela</artifactId>
      <version>0.6.0-SNAPSHOT</version>
      <type>ejb</type>
      <scope>provided</scope>
    </dependency>
    <!--Zeppelin dependencies -->
    <!-- CDI bug. Zeppelin-interpreter includes org.sonatype.guice.**
    which has CDI annotated beans, causing deployment of hopsworks to fail. Because Zeppelin-interpreter
    is a 3rd party jar, Glassfish won't exclude from scanning beans/paths we put in beans.xml 
    -->
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-bean</artifactId>
      <version>2.6.0</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-plexus</artifactId>
      <version>2.6.0</version>
    </dependency> 
    <dependency>
      <groupId>io.hops.zeppelin</groupId>
      <artifactId>zeppelin-interpreter</artifactId>
      <version>0.8.0-SNAPSHOT</version>
      <exclusions>
        <exclusion>
          <groupId>org.apache.zeppelin</groupId>
          <artifactId>zeppelin-zengine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>io.hops.zeppelin</groupId>
      <artifactId>zeppelin-zengine</artifactId>
      <version>0.8.0-SNAPSHOT</version>
      <exclusions>
        <exclusion>
          <groupId>org.apache.zeppelin</groupId>
          <artifactId>zeppelin-interpreter</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- Apache Shiro -->
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-core</artifactId>
      <version>1.2.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-web</artifactId>
      <version>1.2.3</version>
    </dependency>
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz</artifactId>
      <version>2.2.1</version>
    </dependency>

    <!--End of Zeppelin dependencies -->
    <!-- jersey dependencies -->
    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-server</artifactId>
      <version>2.21</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-multipart</artifactId>
      <version>2.21</version>
    </dependency>
    <!-- end of jersey dependencies -->
    <dependency>
      <groupId>io.swagger</groupId>
      <artifactId>swagger-jersey2-jaxrs</artifactId>
      <version>1.5.10</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>18.0</version>
    </dependency>
    <dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-web-api</artifactId>
      <version>7.0</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.influxdb</groupId>
      <artifactId>influxdb-java</artifactId>
      <version>2.5</version>
    </dependency>
    <dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-api</artifactId>
      <version>7.0</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>hopsworks-api</finalName>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
<!--          <annotationProcessors>
            <annotationProcessor>com.predic8.membrane.annot.SpringConfigurationXSDGeneratingAnnotationProcessor</annotationProcessor>
          </annotationProcessors>-->
        </configuration>
      </plugin>

      <!--
        ~ With this plugin we are making sure that the clean command is always called.
        ~ The reason is that we call the war plugin twice. The first time we invoke the exploded
        ~ goal to copy the web resources in the target directory and the second time to build the war file.
        ~ In between, if the kube profile is enabled we modify the beans.xml file.
        ~ To make sure that the war:war goal (the second execution) packages the correct beans.xml we need to make sure
        ~ that it uses the cache (i.e. the files already present in the target directory).
        ~
        ~ To avoid troubles of classes modified in code and cached in the target directory, here we are binding the
        ~ clean goal during the initialization phase (the first phase). In this way even if someone forgot to invoke
        ~ the clean target, he/she will find a clean directory.
      -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>auto-clean</id>
            <phase>initialize</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.0.0</version>
        <configuration>
          <failOnMissingWebXml>true</failOnMissingWebXml>
          <useCache>true</useCache>
        </configuration>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>exploded</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

    <profiles>
    <profile>
      <id>kube</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.google.code.maven-replacer-plugin</groupId>
            <artifactId>maven-replacer-plugin</artifactId>
            <version>1.3.7</version>
            <executions>
              <execution>
                <phase>process-resources</phase>
                <goals>
                  <goal>replace</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <file>target/hopsworks-api/WEB-INF/beans.xml</file>
              <replacements>
                <replacement>
                  <token>io.hops.hopsworks.common.serving.tf.LocalhostTfServingController</token>
                  <value>io.hops.hopsworks.kube.serving.KubeTfServingController</value>
                </replacement>
              </replacements>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
